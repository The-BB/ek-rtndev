--- a/Makefile.classic
+++ b/Makefile.classic
@@ -27,7 +27,7 @@ OBJDIR = ./bld
 #    See TCC below for the C compiler for building the finished binary.
 #
 BCC = gcc
-BCCFLAGS = $(CFLAGS)
+BCCFLAGS = 
 
 #### The suffix to add to final executable file.  When cross-compiling
 #    to windows, make this ".exe".  Otherwise leave it blank.
@@ -42,7 +42,7 @@ E =
 #
 #TCC = gcc -O6
 #TCC = gcc -g -O0 -Wall -fprofile-arcs -ftest-coverage
-TCC = gcc -g -Os -Wall
+TCC = $(CC)
 
 # To add support for HTTPS
 TCC += -DFOSSIL_ENABLE_SSL
@@ -84,7 +84,7 @@ TCLSH = tclsh
 
 CFLAGS += -fPIE
 CPPFLAGS += -I. -I$(SRCDIR_extsrc) -I$(SRCDIR)
-LIB = -lm -lz -lssl
+#LIB = -lm -lz -lssl
 INSTALLDIR = $(DESTDIR)$(prefix)/bin
 SQLITE3_ORIGINAL = 0
 USE_LINENOISE = 1
--- a/src/main.mk
+++ b/src/main.mk
@@ -2132,52 +2132,8 @@ $(SRCDIR_extsrc)/pikchr.js: $(SRCDIR_ext
 wasm: $(SRCDIR_extsrc)/pikchr.js
 
 #
-# compile_commands.json support...
-#
-# We have to avoid applying compile_commands support to the in-tree
-# tools, as those compile with BCC, which may differ from TCC.
-# e.g. BCC might be gcc (which does not support -MJ ...) while TCC is
-# clang (which does).
-#
-# What follows is more verbose than strictly necessary because we're
-# limited to POSIX make syntax.
-all:
-compile-commands-dir.yes = $(OBJDIR)
-compile-commands-dir.no =
-compile-commands-dir = $(compile-commands-dir.$(MAKE_COMPILATION_DB))
-compile-command-args.yes = -MJ $(TOPDIR)/$(compile-commands-dir)/$(@F:.o=.o.json)
-compile-command-args.no =
-TCCFLAGS += $(compile-command-args.$(MAKE_COMPILATION_DB))
-compile_commands.json = $(TOPDIR)/compile_commands.json
-# compile_commands.json is a concatenation of the .o.json files
-# generated by the compilation process via TCCFLAGS. We have a
-# potential race condition in parallel builds, where a .o.json file is
-# not yet written to completion before compile_commands.json is
-# processed. How to resolve that in a way compatible with POSIX make
-# is unclear.
-#
-# This obscure sed bit ensures that the resulting JSON array does not
-# have a trailing comma.
-$(compile_commands.json): $(OBJ)
-	@-rm -f $@
-	@{ echo '['; cat $(compile-commands-dir)/*.o.json | tr '\n' ' ' | sed -e 's/, $$//'; echo ']'; } > $@
-	@echo "Generated $@"
-compile-commands.no:
-compile-commands.yes: $(compile_commands.json)
-all: compile-commands.$(MAKE_COMPILATION_DB)
-clean: compile-commands-clean
-compile-commands-clean:
-	rm -fr $(compile_commands.json)
-
-#
-# End compile_commands.json support
-#
-
-#
 # The list of all the targets that do not correspond to real files. This stops
 # 'make' from getting confused when someone makes an error in a rule.
 #
 
 .PHONY: all install test clean
-.PHONY: compile-commands-clean compile-commands-dir
-
