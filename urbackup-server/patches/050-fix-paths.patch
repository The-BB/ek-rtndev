--- a/file_linux.cpp
+++ b/file_linux.cpp
@@ -229,7 +229,7 @@ bool File::OpenTemporaryFile(const std::
 	char *tmpdir=getenv("TMPDIR");
 	std::string stmpdir;
 	if(tmpdir==NULL )
-		stmpdir="/tmp";
+		stmpdir="/opt/tmp";
 	else
 	    stmpdir=tmpdir; 
 
--- a/fileservplugin/main.cpp
+++ b/fileservplugin/main.cpp
@@ -305,7 +305,7 @@ int WINAPI WinMain(HINSTANCE hInstance,
 #ifdef _WIN32
 	logfile.open("C:\\urinstallsrv.log", std::ios::out | std::ios::binary );
 #else
-	logfile.open("/var/log/urinstallsrv.log", std::ios::out | std::ios::binary );
+	logfile.open("/opt/var/log/urinstallsrv.log", std::ios::out | std::ios::binary );
 #endif
 #endif
 
--- a/luaplugin/src/loslib.c
+++ b/luaplugin/src/loslib.c
@@ -115,7 +115,7 @@ static time_t l_checktime (lua_State *L,
 #define LUA_TMPNAMBUFSIZE	32
 
 #if !defined(LUA_TMPNAMTEMPLATE)
-#define LUA_TMPNAMTEMPLATE	"/tmp/lua_XXXXXX"
+#define LUA_TMPNAMTEMPLATE	"/opt/tmp/lua_XXXXXX"
 #endif
 
 #define lua_tmpnam(b,e) { \
--- a/luaplugin/src/luaconf.h
+++ b/luaplugin/src/luaconf.h
@@ -200,7 +200,7 @@
 
 #else			/* }{ */
 
-#define LUA_ROOT	"/usr/local/"
+#define LUA_ROOT	"/opt/"
 #define LUA_LDIR	LUA_ROOT "share/lua/" LUA_VDIR "/"
 #define LUA_CDIR	LUA_ROOT "lib/lua/" LUA_VDIR "/"
 #define LUA_PATH_DEFAULT  \
--- a/main.cpp
+++ b/main.cpp
@@ -425,7 +425,7 @@ int main_fkt(int argc, char *argv[])
 		
 		if(pidfile.empty())
 		{
-			pidfile="/var/run/urbackup_srv.pid";
+			pidfile="/opt/var/run/urbackup_srv.pid";
 		}
 		
 		std::fstream pf;
@@ -583,7 +583,7 @@ int main_fkt(int argc, char *argv[])
 	Server->startupComplete();
 
 #ifndef _WIN32
-	writestring("", "/var/run/urbackupsrv.ready");
+	writestring("", "/opt/var/run/urbackupsrv.ready");
 #endif
 
 	if(no_server==false )
--- a/mount_helper/main.cpp
+++ b/mount_helper/main.cpp
@@ -35,13 +35,13 @@ extern char **environ;
 
 IServer *Server;
 
-const char* mdconfig_path = "/sbin/mdconfig";
-const char* umount_path = "/sbin/umount";
+const char* mdconfig_path = "/opt/sbin/mdconfig";
+const char* umount_path = "/opt/sbin/umount";
 
 
 std::string getBackupfolderPath()
 {
-	std::string fn=trim(getFile("/etc/urbackup/backupfolder"));
+	std::string fn=trim(getFile("/opt/etc/urbackup/backupfolder"));
 	if(fn.find("\n")!=std::string::npos)
 		fn=getuntil("\n", fn);
 	if(fn.find("\r")!=std::string::npos)
@@ -213,29 +213,9 @@ std::string find_urbackupsrv_cmd()
 		urbackupsrv_cmd = BINDIR "/urbackupsrv";
 		return urbackupsrv_cmd;
 	}
-	else if(exec_wait("/usr/local/bin/urbackupsrv", false, "--version", NULL)==1)
+	else if(exec_wait("/opt/bin/urbackupsrv", false, "--version", NULL)==1)
 	{
-		urbackupsrv_cmd="/usr/local/bin/urbackupsrv";
-		return urbackupsrv_cmd;
-	}
-	if(exec_wait("/sbin/urbackupsrv", false, "--version", NULL)==1)
-	{
-		urbackupsrv_cmd="/sbin/urbackupsrv";
-		return urbackupsrv_cmd;
-	}
-	else if(exec_wait("/bin/urbackupsrv", false, "--version", NULL)==1)
-	{
-		urbackupsrv_cmd="/bin/urbackupsrv";
-		return urbackupsrv_cmd;
-	}
-	else if(exec_wait("/usr/sbin/urbackupsrv", false, "--version", NULL)==1)
-	{
-		urbackupsrv_cmd="/usr/sbin/urbackupsrv";
-		return urbackupsrv_cmd;
-	}
-	else if(exec_wait("/usr/bin/urbackupsrv", false, "--version", NULL)==1)
-	{
-		urbackupsrv_cmd="/usr/bin/urbackupsrv";
+		urbackupsrv_cmd="/opt/bin/urbackupsrv";
 		return urbackupsrv_cmd;
 	}
 	else
--- a/sqlite/shell.c
+++ b/sqlite/shell.c
@@ -22389,7 +22389,7 @@ static void newTempFile(ShellState *p, c
 #ifdef _WIN32
       zTemp = "\\tmp";
 #else
-      zTemp = "/tmp";
+      zTemp = "/opt/tmp";
 #endif
     }
     p->zTempFile = sqlite3_mprintf("%s/temp%llx.%s", zTemp, r, zSuffix);
--- a/sqlite/sqlite3.c
+++ b/sqlite/sqlite3.c
@@ -43488,6 +43488,7 @@ static int fillInUnixFile(
 static const char *azTempDirs[] = {
   0,
   0,
+  "/opt/tmp",
   "/var/tmp",
   "/usr/tmp",
   "/tmp",
--- a/urbackupserver/cmdline_preprocessor.cpp
+++ b/urbackupserver/cmdline_preprocessor.cpp
@@ -171,7 +171,7 @@ void read_config_file(std::string fn, st
 			{
 				if(val[0]!='/')
 				{
-					val = "/var/log/"+val;
+					val = "/opt/var/log/"+val;
 				}
 				real_args.push_back("--logfile");
 				real_args.push_back(val);
@@ -459,7 +459,7 @@ int action_run(std::vector<std::string>
 
 	TCLAP::ValueArg<std::string> logfile_arg("l", "logfile",
 		"Specifies the log file name",
-		false, "/var/log/urbackup.log", "path", cmd);
+		false, "/opt/var/log/urbackup.log", "path", cmd);
 
 	std::vector<std::string> loglevels;
 	loglevels.push_back("debug");
@@ -482,7 +482,7 @@ int action_run(std::vector<std::string>
 
 	TCLAP::ValueArg<std::string> pidfile_arg("w", "pidfile",
 		"Save pid of daemon in file",
-		false, "/var/run/urbackupsrv.pid", "path", cmd);
+		false, "/opt/var/run/urbackupsrv.pid", "path", cmd);
 
 	TCLAP::MultiArg<std::string> broadcast_interface_arg("b", "broadcast-interface",
 		"Network interface from which to send broadcasts", false, "network interface name", cmd);
@@ -938,7 +938,7 @@ int action_mount_vhd(std::vector<std::st
 
 	TCLAP::ValueArg<std::string> logfile_arg("l", "logfile",
 		"Specifies the log file name for the background VHD-reading process",
-		false, "/var/log/urbackup-fuse.log", "path", cmd);
+		false, "/opt/var/log/urbackup-fuse.log", "path", cmd);
 
 	TCLAP::SwitchArg guestmount_arg("g", "guestmount", 
 		"Use libguestfs guestmount to mount the file system", cmd, false);
@@ -967,7 +967,7 @@ int action_mount_vhd(std::vector<std::st
 		char *tmpdir=getenv("TMPDIR");
 		std::string stmpdir;
 		if(tmpdir==NULL )
-			stmpdir="/tmp";
+			stmpdir="/opt/tmp";
 		else
 			stmpdir=tmpdir; 
 
--- a/urbackupserver/dllmain.cpp
+++ b/urbackupserver/dllmain.cpp
@@ -705,7 +705,7 @@ DLLEXPORT void LoadActions(IServer* pSer
 		
 	if( FileExists("urbackup/backupfolder")
 #ifndef _WIN32
-		|| FileExists("/etc/urbackup/backupfolder")
+		|| FileExists("/opt/etc/urbackup/backupfolder")
 #endif
 		)
 	{
@@ -718,7 +718,7 @@ DLLEXPORT void LoadActions(IServer* pSer
 #ifndef _WIN32
 			if (bf.empty())
 			{
-				bf = getFile("/etc/urbackup/backupfolder");
+				bf = getFile("/opt/etc/urbackup/backupfolder");
 			}
 #endif
 			if(linecount(bf)>0)
--- a/urbackupserver/restore_client.cpp
+++ b/urbackupserver/restore_client.cpp
@@ -309,7 +309,7 @@ namespace
 				fileserv->registerMetadataCallback("clientdl" + convert(i), identity, callback);
 			}
 			
-			fileserv->shareDir("urbackup", "/tmp/mkmergsdfklrzrehmklregmfdkgfdgwretkldf", identity, false);
+			fileserv->shareDir("urbackup", "/opt/tmp/mkmergsdfklrzrehmklregmfdkgfdgwretkldf", identity, false);
 			ClientMain::addShareToCleanup(curr_clientid, SShareCleanup("urbackup", identity, false, false));
 
 
--- a/urbackupserver/server.cpp
+++ b/urbackupserver/server.cpp
@@ -148,8 +148,8 @@ void BackupServer::operator()(void)
 		}
 
 #ifndef _WIN32
-		os_create_dir("/etc/urbackup");
-		writestring(backupfolder, "/etc/urbackup/backupfolder");
+		os_create_dir("/opt/etc/urbackup");
+		writestring(backupfolder, "/opt/etc/urbackup/backupfolder");
 #endif
 	}
 
--- a/urbackupserver/serverinterface/settings.cpp
+++ b/urbackupserver/serverinterface/settings.cpp
@@ -392,8 +392,8 @@ void saveGeneralSettings(str_map &POST,
 				val = fixupBackupfolder(val, backupdao, server_settings, changed_backupfolder);
 
 #ifndef _WIN32
-				os_create_dir("/etc/urbackup");
-				writestring((val), "/etc/urbackup/backupfolder");
+				os_create_dir("/opt/etc/urbackup");
+				writestring((val), "/opt/etc/urbackup/backupfolder");
 #endif
 			}
 			updateSetting(settings[i], val, q_get, q_update, q_insert);
