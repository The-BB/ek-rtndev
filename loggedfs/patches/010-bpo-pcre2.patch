# https://github.com/rflament/loggedfs/commit/82aba9a93489797026ad1a37b637823ece4a7093
--

--- a/Makefile
+++ b/Makefile
@@ -1,6 +1,6 @@
 CC=g++
 CFLAGS=-Wall -ansi -D_FILE_OFFSET_BITS=64 -DFUSE_USE_VERSION=26 -DELPP_SYSLOG -DELPP_NO_DEFAULT_LOG_FILE -DELPP_THREAD_SAFE -std=c++11 `xml2-config --cflags` 
-LDFLAGS=-Wall -ansi -lpcre -lfuse `xml2-config --libs` -lpthread
+LDFLAGS=-Wall -ansi -lpcre2-8 -lfuse `xml2-config --libs` -lpthread
 srcdir=src
 easyloggingdir=vendor/github.com/muflihun/easyloggingpp/src
 builddir=build
--- a/src/Filter.cpp
+++ b/src/Filter.cpp
@@ -22,7 +22,8 @@
  *
  */
 #include "Filter.h"
-#include <pcre.h>
+#define PCRE2_CODE_UNIT_WIDTH 8
+#include <pcre2.h>
 
 #define OVECCOUNT 30
 
@@ -37,14 +38,15 @@ Filter::~Filter()
 
 bool Filter::matches( const char* str,const char* pattern)
 {
-    pcre *re;
-    const char *error;
-    int ovector[OVECCOUNT];
-    int erroffset;
+    pcre2_code *re;
+    int error;
+    pcre2_match_data *match_data;
+    PCRE2_SIZE erroffset;
 
 
-    re = pcre_compile(
-             pattern,
+    re = pcre2_compile(
+             (PCRE2_SPTR)pattern,
+             PCRE2_ZERO_TERMINATED,
              0,
              &error,
              &erroffset,
@@ -53,21 +55,22 @@ bool Filter::matches( const char* str,co
 
     if (re == NULL)
     {
-        printf("PCRE compilation failed at offset %d: %s\n", erroffset, error);
+        printf("PCRE compilation failed at offset %zu: %d\n", erroffset, error);
         return false;
     }
 
-    int rc = pcre_exec(
+    match_data = pcre2_match_data_create_from_pattern(re, NULL);
+
+    int rc = pcre2_match(
                  re,                   /* the compiled pattern */
-                 NULL,                 /* no extra data - we didn't study the pattern */
-                 str,              /* the subject string */
+                 (PCRE2_SPTR)str,              /* the subject string */
                  strlen(str),       /* the length of the subject */
                  0,                    /* start at offset 0 in the subject */
                  0,                    /* default options */
-                 ovector,              /* output vector for substring information */
-                 OVECCOUNT);           /* number of elements in the output vector */
+                 match_data,
+                 NULL);
 
-    pcre_free(re);
+    pcre2_code_free(re);
     return (rc >= 0);
 }
 
